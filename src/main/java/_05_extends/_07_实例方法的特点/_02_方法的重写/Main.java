package _05_extends._07_实例方法的特点._02_方法的重写;

/**
 * ClassName:
 * Package: _05_extends._07_实例方法的特点._02_
 * Description: 测试
 *
 * @Author Ocean_jhl
 * @Create 2023/10/18 21:52
 * @Version 1.0
 *
 * 方法的重写：
 *      含义：
 *          在继承关系（实现关系）中，出现了【方法名相同】，【形参列表相同】，
 *          【权限访问级别】和【返回类型】遵循相关规则的现象
 *      目的：
 *          1. 为了后期进行功能的扩展
 *          2. 方法的重写是学习【多态】，【接口】，【匿名内部类】的核心条件
 *      前提条件：
 *          1. 必须存在【继承关系】或【实现关系】
 *          2. 重写方法的【方法名】必须相同
 *          3. 重写方法的【形参列表】必须相同
 *          4. 重写方法的【权限访问级别】必须【大于或等于】父类，且遵循权限访问级别规则
 *          5. 重写方法的【返回类型】在【内存中】必须相同
 *      注意事项：
 *          1. Java为方法重写提供了【语法格式检测工具（方法重写注解）】来验证是否满足方法重写条件
 *                 方法重写注解：
 *                      含义：
 *                          用来验证子类方法是否满足方法重写的条件，
 *                          如果满足，则可以正常编译通过，
 *                          如果不满足，则无法编译通过
 *                      格式：
 *                          @Override
 *                          修饰符 返回类型 重写方法名(实参列表?) {}
 *          2. 父类的【私有方法】无法被重写
 *          3. 子父类不在同包下，则父类的【缺省权限方法】无法被子类重写
 *          4. 父类的【静态方法】无法被重写，编写代码时需要遵循方法重写的前提条件
 *          5. 重写方法的返回类型
 *              1). 父类的返回类型为void时，子类的返回类型也必须为void
 *              2). 父类的返回类型为基本类型时，子类的返回类型也必须为该基本类型
 *              3). 父类的返回类型为引用类型时，子类的返回类型必须为【该引用类型】或【该引用类型的子类类型】
 */
public class Main {
    public static void main(String[] args) {
        // 创建SubClass对象
        final SubClass sc = new SubClass();
        sc.method();
    }
}
